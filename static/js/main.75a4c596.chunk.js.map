{"version":3,"sources":["components/util.js","components/VaccineTable.js","components/LastUpdated.js","components/RssFeed.js","App.js","reportWebVitals.js","index.js"],"names":["enumerate","array","i","length","DATA_COLUMNS","field","headerName","hide","flex","renderCell","params","Link","href","getValue","value","varient","style","color","green","valueGetter","SORT_MODEL","sort","VaccineTable","props","getData","fetch","headers","Accept","then","response","json","vaccineAvailability","setState","data","tableLoading","state","this","rows","columns","autoHeight","loading","sortModel","React","Component","LastUpdated","getLastUpdated","lastUpdated","moment","unix","format","RssFeed","App","prefersDarkMode","useMediaQuery","theme","useMemo","createMuiTheme","palette","type","ThemeProvider","className","CssBaseline","Alert","severity","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75a4c596.chunk.js","sourcesContent":["export function* enumerate(array) {\n  for (let i = 0; i < array.length; i += 1) {\n    yield [i, array[i]];\n  }\n}\n","import React from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport Link from \"@material-ui/core/Link\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport { enumerate } from \"./util\";\nimport { green } from \"@material-ui/core/colors\";\n\nconst DATA_COLUMNS = [\n  { field: \"id\", headerName: \"id\", hide: true },\n  {\n    field: \"available\",\n    headerName: \"Available\",\n    flex: 0.25,\n    renderCell: (params) => (\n      <Link href={params.getValue(\"link\")}>\n        {params.value === \"yes\" ? (\n          <CheckCircleIcon varient=\"outlined\" style={{ color: green[500] }} />\n        ) : (\n          <WarningIcon varient=\"outlined\" color=\"error\" />\n        )}\n      </Link>\n    ),\n  },\n  { field: \"store_name\", headerName: \"Store Name\", flex: 0.25 },\n  {\n    field: \"store_address\",\n    headerName: \"Store Address\",\n    flex: 0.25,\n    valueGetter: (params) => `${params.value}, ${params.getValue(\"store_city\")}`,\n  },\n  { field: \"store_city\", headerName: \"Store City\", flex: 0.25, hide: true },\n  { field: \"link\", headerName: \"Link\", flex: 1, hide: true },\n];\nconst SORT_MODEL = [\n  {\n    field: \"available\",\n    sort: \"desc\",\n  },\n];\n\nexport class VaccineTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data: [], tableLoading: true };\n  }\n\n  getData = () => {\n    fetch(\"data.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((vaccineAvailability) => {\n        for (let [i, row] of enumerate(vaccineAvailability)) {\n          row[\"id\"] = i;\n        }\n        // let's split it up into available, and not.\n        // our component can return two tables with one hidden by default\n        this.setState({ data: vaccineAvailability, tableLoading: false });\n      });\n  };\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    return (\n      <DataGrid\n        rows={this.state.data}\n        columns={DATA_COLUMNS}\n        autoHeight={true}\n        loading={this.state.tableLoading}\n        sortModel={SORT_MODEL}\n      />\n    );\n  }\n}\n","import moment from \"moment\";\nimport React from \"react\";\n\nexport class LastUpdated extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { lastUpdated: null };\n  }\n\n  getLastUpdated = () => {\n    fetch(\"last-updated.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((lastUpdated) => {\n        this.setState({\n          lastUpdated: moment.unix(lastUpdated[\"last_updated\"]).format(\"YYYY-MM-DDTHH:mm:ss\"),\n        });\n      });\n  };\n\n  componentDidMount() {\n    this.getLastUpdated();\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Last updated at {this.state.lastUpdated} </h2>\n      </div>\n    );\n  }\n}\n","import RssFeedIcon from '@material-ui/icons/RssFeed';\nimport Link from '@material-ui/core/Link';\n\n\nexport function RssFeed() {\n  return <Link href=\"/covid-vaccine-finder/feed.xml\"><RssFeedIcon /></Link>;\n}\n\n","import \"./App.css\";\nimport { VaccineTable } from \"./components/VaccineTable\";\nimport { LastUpdated } from \"./components/LastUpdated\";\nimport { RssFeed } from \"./components/RssFeed\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { CssBaseline, useMediaQuery } from \"@material-ui/core\";\nimport React from \"react\";\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n      <CssBaseline />\n      <LastUpdated />\n      <Alert severity=\"info\"><RssFeed /> Updates published when available vacccine is detected</Alert>\n      <Alert severity=\"info\">Icons are clickable; click to be redirected to provider's website</Alert>\n      <VaccineTable />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}